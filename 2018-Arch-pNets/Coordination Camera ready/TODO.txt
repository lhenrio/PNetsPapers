
XXX == DONE
XCHECKXX == DONE but it is good if somebody checks the new text
SIMON == TODO SIMON
----------------------- REVIEW 1 ---------------------
PAPER: 18
TITLE: Verification of concurrent design patterns with data
AUTHORS: Simon Bliudze, Ludovic Henrio and Eric Madelaine

Overall evaluation: 0 (borderline paper)

----------- Overall evaluation -----------
SUMMARY:

This paper proposes an approach for the compositional verification of component-based applications where interactions depend on data. The proposal builds on BIP and BIP Architectures. Architectures constraint the way in which components interact and provide the compositionality to the approach: Given the architectures A_1 \land …\land A_n. If A_i enforces P_i, then the composition of all A_i enforces P_1 \land …\land P_n. Model checking of enforced properties is obtained by mapping architectures to open pNets (roughly, a hierarchical composition of LTS that allows for missing parts). The obtained pNets can be used to feed previously developed model checking tools. 


COMMENTS:
I think that this paper addresses a very interesting and relevant problem:  model checking properties of systems whose interactions rely on data. The paper is rather technical and focuses on the definition of the encoding of architectures into pNets. Despite I have some familiarity with BIP, I found the technical material quite cryptic. Definitions are non standard and quite involved. Several definitions are presented without appropriate explanations or examples.  I understand the constraint imposed by the page limit, but I would suggest to consider a more intuitive roadmap, maybe at the expenses of relegating some definitions to a technical report. 
It was very hard for me to get a big picture on how all ingredients (pLTS, pNets, Open Automaton, component, composition, Architecture,  composition, ….) relate. Maybe you could add some explanation at the very beginning. 

I appreciate the fact that you provide a theoretical result that enables model-checking. However, I found the details of the encoding not very enlightening (maybe because I was unable to catch all the details in the models). I would appreciate instead examples illustrating the kind of properties that you are able to show now with data. You may also consider illustrating how architecture composition can be used to reason about concrete properties of the running example.



DETAILED COMMENTS / TYPOS

XXX P3. “. u ranges over sets” I would avoid such starting for a statement

XXX P4. “A pLTS is a labelled transition system with variables … Variables of
each state are pairwise disjoint”. Confusing text,  variables are associated with the LTS or with the states? 

XCHECKXX P4. “We need to introduce input variables to reason about the data flow between actions” which are the other variables?

XCHECKXX P5 “The red dotted rule expresses … and could be handled mechanically”. This discussion is pretty cryptic to me. Maybe a more detailed explanation would be of help.
Paragraph rewritten

XXX Example 1, <| 11 |> means variable t has value 11? If this is the case, why don’t writing it explicitly.

Def 9, 
XXX coordinating? components. Are different from components? They are later referred to as coordinators.

XXX It would be a good idea to say what P_A is


----------------------- REVIEW 2 ---------------------
PAPER: 18
TITLE: Verification of concurrent design patterns with data
AUTHORS: Simon Bliudze, Ludovic Henrio and Eric Madelaine

Overall evaluation: 0 (borderline paper)

----------- Overall evaluation -----------
SUMMARY

BIP is a framework for designing component-based systems.
BIP models of components can be composed by means of BIP architectures that can serve express some reusable design patterns and to guarantee correctness by construction.
It is shown that if two BIP architectures guarantee some safety properties, then their composition guarantee the conjunction of such properties, which is very helpful for compositional verification.
The aim of the paper is to cast BIP architectures to some format that is amenable to automatic verification.
This is difficult because of two main reasons: i) BIP architectures are parametric, thus the property must put for all the valid components that can be plugged in; ii) data transfer is allowed in the communications coordinated by the BIP architectures, the properties can be data dependent and data domains can be unbounded, so that symbolic techniques are necessary.
The solution proposed in the paper is to define a behaviour preserving transformation from BIP architectures (with data) to a formal model called open pNets, for which verification tools are available to prove temporal properties.
The translation is given in Section 4, where the main theorem asserts a strong result about behaviour preservation (isomorphic LTS). The case where the behaviour is constrained by a priority model called maximal progress is also briefly considered.
The study is illustrated over a running case study of a Failure Monitor architecture.

EVALUATION

The subject of the paper is very interesting but the presentation is very technical and the main contribution is really hard to follow and to assess.

In more detail:

Section 2
The presentation of open transitions and open automata is very syntactic, with little intuition about meaning and usage and many unanswered questions. For example 
meaning of the first paragraph on page 5 that compares open transitions with inference rules is quite obscure to me. Also it seems that variables appear in the "premises" and label but not in the states. What does it mean that open transition are identified modulo logical equivalence? (in which logic? is it decidable?) Is it allowed the presence of "redundant" transitions (e.g. such that the predicate of one is implied by the predicate of another)? Example 1 does not help at all in understanding. I recommend the authors to explain more clearly what an open transition represents and to give basic examples (even limited to some features, not showing the entire potential of pNets, as far as this can help the undestanding).

Section 3
It is not clear which material is novel and which comes from the literature.
Definition 12 is not helpful at all because it seems to deal just with state predicates, whereas the paper mainly addresses temporal properties. Also the role of data in the running example is not clear (while from the introduction it seems the focus should be on data dependent properties).
Is Theorem 1 one main contribution? From the appendix it seems so, but from the text is not so evident.
I recommend the authors to state explicit which material is original to this contribution and to discuss data-dependent properties for the running example (the simpler the better).

Section 4
This section must be entirely rewritten to give some intuition about the translation. For the encoding of the coordinators, the complexity of the technical definition makes even hard to tell if the translation has some ingenuity or if it is mostly a syntax transformation. The part about the encoding of the interaction model is even worst and seems to rely in large part to concepts taken from a vast literature and moved to the appendices. Again the authors give no intuition about the transformation. Here I recommend the authors to show step-by-step examples of the translation to give some intuition about each transformation.
Theorem 2, which seems the main result is given without any comment and proof: I cannot see how the isomorphism can be proved between two models that are so different (open automaton and LTS)! It is also not explained at all where the assumptions about all guards and expressions being monotonic are used in the results. Details about the experiments are mostly in the appendices and no compositional verification of data dependent properties is illustrated in the main body.
Please revise the this part by: i) sketching the isomorphism claimed in Th. 2 (e.g. on the basis of an example where the correspondence is explained step by step); ii) explaining where monotonicity is used; iii) briefly discussing the conducted experiments; iv) avoiding any reference to the appendix/literature in order to understand the translation.

OTHER COMMENTS

XXREMOVEDX P2,mid page: what does it mean that "The structure of pNets is static but unbounded"?

XXMultiset-> mapX P3: are family ranges finite? Otherwise you cannot even speak of multisets, as some elements might have infinite multiplicity.

XNO: but we could change one to avoid having 2 AsXX (one is action the other is assignments)XX
	P3: {\cal A} -> \mathbb{A} (twice) ?

XX<=X P3: partial orders are reflexive, so you better use \leq instead of <

XXDefs 11 and 12 (and proof of Th 1) rely on these -- Don't see what to explainX P3: it is never explained why you need partially ordered sets, meet semilattices and meet operator.

XXSIMON-->LUDO? - Looks ok to me with the explanation for the comment belowXX P4: it is really not clear what an open transition does represent. To me the "premises" are just part of the label of the transition: is this view correct? Moreover, is there any connection between states and variables?

XXMinor edits by SimonXX P5: "The red dotted ... mechanically" I cannot make any sense of this whole paragraph
paragraph rewritten

XXWe additionally refer to fig 3 nowXX
P5: Instead of presenting a single open transition you better present here an open automaton, possibly one that has some meaning, or at least refer to Fig. 3.

XXX P5,Def. 5: why guards and updates must be monotonic? When is an update monotonic?

XXX On P6, Fig.1, the guard t < z.u does not look monotonic on t (under the mentioned ordering of integers and boolean). Same for t\in z. You should also explain that z.u denotes the upper bound of the interval z.

XX Provided an additional intuition XX SEE WITH NEW VERSION OF SEC 4XX P10: explain in more detail the definition in the lower half of the page.

XX Provided an additional intuition -- Can't see how to do better, since it's already essentially by example! XX SEE WITH NEW VERSION OF SEC 4 XX P12-13: This part is really hard to follow: need more explanations

XX Problem !! XX SEE WITH NEW VERSION OF SEC 4 XX P13,Th.2: I don't see how the isomorphism can be proved.

ERIC
P14: please provide an example of data dependent property in the main body of the paper.


----------------------- REVIEW 3 ---------------------
PAPER: 18
TITLE: Verification of concurrent design patterns with data
AUTHORS: Simon Bliudze, Ludovic Henrio and Eric Madelaine

Overall evaluation: 1 (weak accept)

----------- Overall evaluation -----------
In [5] a framework based on BIP is presented for composing architectures and reasoning about their properties (both safety and liveness) in a compositional way. This paper extends the theories of [5] with data, and provides the assumptions that the safety properties are preserved by the architecture composition. To verify the property of each architecture, it is encoded by a pNet model for which automatic tools are available to model check its properties by using SMT engines. The translation of BIP architectures as open pNet models is covered in Section 4.

comments : 
------------

NOT SURE WHAT TO DO (we already explain that they are used for defining the semantics) *The paper is not easy to follow. It is not clear why the reader should study Definitions of open transition and open automaton until it is explained after Def 4 that the semantics of an open pNets is given by an open automaton. 

XX clarified holes actions and open transitions earlier (before def 2) XX
* What is the actions of holes on p5, par 3? Holes were defined by a set of indices

THE END IS FOR SIMON I BELIEVE
XXX *In Section 3, please explain how the Definitions and Theories of [5] have been extended and also the intuition of such extensions.

XXX *It is inferred that the assumption for compositionality is both 1) monotonicity on guards and assignment and 2) upward compatibility between architectures. If yes, please revise the abstract accordingly. 

XXX * Please explain informally why such assumptions are needed.

XXX * It is not discussed why the compositionality results of [5] for liveness properties cannot be extended to this work.


=============================================================
FROM ERIC
- on traite les commentaires des reviewers, au moins les typos et les faciles
-> Ludo
- on explicite de manière plus visible ce qui est background et ce qui est 
nouveau (je pensais que c'etait deja pas mal, mais bon…)
XX -> Ludo ; en fait la question est qu est ce qui est nouveau dans les archis
J ai ajoute 2 phrase insistant sur l ajout des donnees dans les archis, dans l intro

XXDONEXX several places in sec 3 have been detailed/improved

XX - on ajoute des explications intuitives sur ce que c'est que open transitions
-> Ludo
- et des intuitions sur les relations entre les 2 modèles
-> Simon -- PAS VRAIMENT FAIT -- EST-CE QUE C'EST DEMANDE ?
- on réduit section 4 a 1.5 pages, en gardant (??) le théorème 2 sans sa preuve.
-> Simon -- PAS FAIT !!! AJOUTE UNE "INTRO" AVEC L'INTUITION
- on essaie de trouver une propriété qui soit plus "data-oriented", ou on explique 
pourquoi celle qu'on a est deja un résultat nouveau par rapport a l'existant sur
les archis Bip…
-> Eric  [FAIT, mais de maniere un peu brutale... ( une demi-page)]

Il reste la question du RR... On laisse des trucs en appendice, en disant que ca 
sera publie dans un RR d'ici la conf ?

-> Eric mais plus tard —> on pourrait aussi pousser sur HAL la version longue avec les appendices, sans style RR

================================================
LIST OF CHANGES
this is the list of changes agreed with the PC:

- you should clarify the concept of open transition
- clearly state what is the original contribution of section 3
- add examples to help the intuition and readability of the paper
- explain what is the isomorphism claimed in Th. 2 and the role played by the monotonicity assumption
- briefly discuss the conducted experiments
- give an intuition for the references made to appendix/literature
