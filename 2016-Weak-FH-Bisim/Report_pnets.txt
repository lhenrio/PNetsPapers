The article defines a strong and weak bisimulation relations for pNets, Parametrised Networks of Automata.   These pNets have been developed by the authors in prior work.  They define open automata, an intermediary algebraic structure with holes, that is used to define strong bisimulation equivalence.   The (strong) bisimulation equivalence definition for pNets is then obtained indirectly, via a translation between pNets and open automata.    The definition of weak bisimulation for pNets follows a similar procedure.   These definitions are validated via properties compositionality.

Main Points
------------

+ The paper, is for the most part, well-written.  The authors make a conscious effort to tame the complexity of the presentation (see next point).  The running example is well designed and improves comprehension substantially.

- The definition of pNets is cumbersome. I understand that this work extends prior work where the model has been motivated already, but I have my reservations on the utility of the formalisms.    I found the running example (although useful) to be hard to understand.  It would perhaps be useful to provide anecdotal evidence showing that comparable formalisms cannot handle certain features of the example (which would justify the complexity of the model used).

- I was left unconvinced that using open automata as an intermediary structure to define the bisimualtion relations is the best approach to develop this material.  The authors should give more convincing argument that such definitions could not be adequately defined directly on pNets (an already complex framework).  It left me wondering:
1) How do you validate the translation of pNets to Open Automata?  Shouldn't there be some result that states that the translation is semantic preserving?    
2) Why not work directly in terms of Open Automata (and forget all about pNets)?  A prima facie, they appear to be of a comparable complexity to pNets (if not simpler).  There are few people who would be interested in using a framework that relies on the second rule in Def 9 as a modelling language...  

- The definition of bisimulation is slightly non-standard (eg Def 7).  For instance, why does the transfer property require a "set" of matching transitions?  Normally, the existence of one suffices.  Moreover, given that a set is required, shouldn't there be an additional requirement that the matching set is necessarily non-empty? 

- In general, weak bisimulation is *not* a congruence for all types of interacting contexts.  For instance, in the case of CCS, the classsical counter example is that whereas 
tau.a.0  \bisim  a.0
we do *not* have
tau.a.0 + b.0 \bisim  a.0 + b.0 
Given the generality of the pNets framework I found the claim stated in Theorem 7 to be suspicious (and hard to ascertain).  The authors should perhaps provide more intuition why this is the case for their framework.


Minor Points
------------

pg 4 
l 16: a_i -> "a" is also used as an action variable.
l 22: denotes *as* (3 \mapsto a)
l -6: why not use an asymmetric symbol instead of \otimes? 

pg 9
l 6: why J' \subseteq J and not the entire set J?
l 18: open -> Open.  
l 18: The sentence is a bit vague and obscure.
l -6 (formula): make the quantifications of Pred and Post explicit (i.e. whether they are universally or existentially quantified)

pg 10:
l 3..6: I cannot see how this follows as a consequence.
l 17: *a* relation
l 19: take -> takes
l 23: !J (what does ! denote)?
l 26: "Variables in V1 and V2 verify the predicate P_s,t" I am not sure what you mean by this.
l 27..28: why should V1 and V2 be disjoint?


pg 13: 
second rule in def 9: why are indices split between I1 and I2?

pg 14: 
why is the term "Specification pNet" capitalised?

pg 16: 
l -2..-1:  Why does Theorem 5 imply the utility for studying interaction protocols?

pg 17:
l -4: I found this condition hard to map to the intuition given on pg 18 line 1..2 

pg 25:
l 20: Provide a citation for the tools alluded to.